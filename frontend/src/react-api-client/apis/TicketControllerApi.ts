/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Ticket,
} from '../models/index';
import {
    TicketFromJSON,
    TicketToJSON,
} from '../models/index';

export interface CreateTicketRequest {
    ticket: Ticket;
}

export interface DeleteTicketRequest {
    id: number;
}

export interface SearchTicketsRequest {
    address?: string;
    destinationAddress?: string;
    kickoffAddress?: string;
}

export interface UpdateTicketRequest {
    id: number;
    ticket: Ticket;
}

/**
 * 
 */
export class TicketControllerApi extends runtime.BaseAPI {

    /**
     */
    async createTicketRaw(requestParameters: CreateTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Ticket>> {
        if (requestParameters['ticket'] == null) {
            throw new runtime.RequiredError(
                'ticket',
                'Required parameter "ticket" was null or undefined when calling createTicket().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/tickets`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TicketToJSON(requestParameters['ticket']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketFromJSON(jsonValue));
    }

    /**
     */
    async createTicket(requestParameters: CreateTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Ticket> {
        const response = await this.createTicketRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteTicketRaw(requestParameters: DeleteTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteTicket().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/tickets/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteTicket(requestParameters: DeleteTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTicketRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllTicketsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Ticket>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/tickets`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TicketFromJSON));
    }

    /**
     */
    async getAllTickets(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Ticket>> {
        const response = await this.getAllTicketsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async searchTicketsRaw(requestParameters: SearchTicketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Ticket>>> {
        const queryParameters: any = {};

        if (requestParameters['address'] != null) {
            queryParameters['address'] = requestParameters['address'];
        }

        if (requestParameters['destinationAddress'] != null) {
            queryParameters['destinationAddress'] = requestParameters['destinationAddress'];
        }

        if (requestParameters['kickoffAddress'] != null) {
            queryParameters['kickoffAddress'] = requestParameters['kickoffAddress'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/tickets/search`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TicketFromJSON));
    }

    /**
     */
    async searchTickets(requestParameters: SearchTicketsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Ticket>> {
        const response = await this.searchTicketsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateTicketRaw(requestParameters: UpdateTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Ticket>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateTicket().'
            );
        }

        if (requestParameters['ticket'] == null) {
            throw new runtime.RequiredError(
                'ticket',
                'Required parameter "ticket" was null or undefined when calling updateTicket().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/tickets/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TicketToJSON(requestParameters['ticket']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketFromJSON(jsonValue));
    }

    /**
     */
    async updateTicket(requestParameters: UpdateTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Ticket> {
        const response = await this.updateTicketRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
