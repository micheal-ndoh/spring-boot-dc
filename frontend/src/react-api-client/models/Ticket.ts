/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Ticket
 */
export interface Ticket {
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    passengerName: string;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    address: string;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    destinationAddress: string;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    kickoffAddress: string;
    /**
     * 
     * @type {Date}
     * @memberof Ticket
     */
    flightDate: Date;
}

/**
 * Check if a given object implements the Ticket interface.
 */
export function instanceOfTicket(value: object): value is Ticket {
    if (!('passengerName' in value) || value['passengerName'] === undefined) return false;
    if (!('address' in value) || value['address'] === undefined) return false;
    if (!('destinationAddress' in value) || value['destinationAddress'] === undefined) return false;
    if (!('kickoffAddress' in value) || value['kickoffAddress'] === undefined) return false;
    if (!('flightDate' in value) || value['flightDate'] === undefined) return false;
    return true;
}

export function TicketFromJSON(json: any): Ticket {
    return TicketFromJSONTyped(json, false);
}

export function TicketFromJSONTyped(json: any, ignoreDiscriminator: boolean): Ticket {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'passengerName': json['passengerName'],
        'address': json['address'],
        'destinationAddress': json['destinationAddress'],
        'kickoffAddress': json['kickoffAddress'],
        'flightDate': (new Date(json['flightDate'])),
    };
}

export function TicketToJSON(json: any): Ticket {
    return TicketToJSONTyped(json, false);
}

export function TicketToJSONTyped(value?: Ticket | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'passengerName': value['passengerName'],
        'address': value['address'],
        'destinationAddress': value['destinationAddress'],
        'kickoffAddress': value['kickoffAddress'],
        'flightDate': ((value['flightDate']).toISOString().substring(0,10)),
    };
}

